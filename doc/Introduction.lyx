#LyX 1.6.2 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass scrartcl
\begin_preamble


\title{die Überüberschrift, die über der Ausarbeitung steht und noch nicht ausformuliert wurde}
\author{Markus, Vitali}
\date{01.01.1900}
\end_preamble
\options DIN15
\use_default_options false
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_amsmath 0
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Section
Grundlagen von Service Discovery
\end_layout

\begin_layout Standard
Der aktuelle Fortschritt und die Entwicklung in der Informatik ermöglichen
 immer kleinere und mobile Geräte, die bereits jetzt über viele Eigenschaften
 und Fähigkeiten verfügen.
 Die aktuellen mobilen Geräte haben immer längere Akkulauftzeiten, bieten
 immer mehr Rechenleistung und können dadurch auch viele verschiedene Anwendunge
n ausführen.
 Mit mobilen Geräten sind hier nicht nur Notebooks, sondern unter anderem
 auch PDA's, Handy's, iPhones, MP3 Player etc., gemeint.
 Durch diese Entwicklung ergeben sich auch Möglichkeiten die mobilen Geräte
 ebenfalls sinnvoll zu vernetzen.
 Ein Ziel dieser Vernetzung ist es, die Kommunikation zwischen den einzelnen
 mobilen Geräten zu ermöglichen um verschiedene Dienste und Services, die
 die einzelnen Geräte anbieten, untereinanderer 
\begin_inset Quotes eld
\end_inset

auszutauschen
\begin_inset Quotes erd
\end_inset

 bzw.
 zu nutzen.
 Ein mögliches Szenario wäre z.B.
 eine Bestellung per Handy aufzunehmen.
 Damit dies funktionieren kann, müssen einige Voraussetzungen erfüllt werden:
 
\end_layout

\begin_layout Itemize
Server und Client müssen in einem Netzwerk sein 
\end_layout

\begin_layout Itemize
Beide Kommunikationspartner müssen sich 
\begin_inset Quotes eld
\end_inset

verstehen
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout Itemize
Und bei solch 
\begin_inset Quotes eld
\end_inset

selnsiblen
\begin_inset Quotes erd
\end_inset

 Diensten, muss die Sicherheit zwischen dem Dienstanbieter und dem Client
 möglichst groß sein 
\end_layout

\begin_layout Standard
Wie schon oben beschrieben, liegen die Schwerpunkte dieser Ausarbeitung
 bei Service Discovery im Hinblick auf die Sicherheitsaspekte.
 Um auf die Sicherheitskonzepte oder Sicherheitslücken bei Service Discovery
 besser eingehen zu können werden im folgenden zuerst die Grundlagen von
 Anbieten und Auffinden der Dienste in einem Netzwerk erläutert.
 
\end_layout

\begin_layout Subsection
MANET
\end_layout

\begin_layout Standard
In dieser Ausarbeitung wird ein Netzwerk immer als ein MANET angesehen.
 MANET steht für 
\series bold
M
\series default
obile 
\series bold
A
\series default
d-Hoc 
\series bold
Net
\series default
work.
 MANET ist ein dynamisches Netzwerk und ist ein extra Konzept für mobile
 Geräte.
 Dieses Netzwerk ermöglicht ein dynamisches und dezentralisiertes Verhalten.
 Es wird vorausgesetzt, dass es in diesem Netzwerk keine festen Geräte vorhanden
 sind, die ständig zur Verfügung stehen sollen (z.B.
 Server).
 Und die wichtigste Voraussetzung ist die Mobilität von Endgeräten, d.h.
 die Knoten des Netzwerks sind beweglich und können ihre Position ändern,
 wodurch auch das Netzwerk beeinflüsst wird.
 MANET stellt somit also sicher, dass die einzelnen Netzwerkknoten das Netzwerk
 einfach betretten bzw.
 verlassen können.
 (Wie dies genau geschiet ist nicht das Thema dieser Ausarbeitung) 
\end_layout

\begin_layout Subsection
Service Discovery Architekturen
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%Quelle: 2008-SD-SURVEY-COMST.pdf
\end_layout

\end_inset

Es gibt drei wichtige Architekturansätze, die für Service Discovery benutzt
 werden.
 
\end_layout

\begin_layout Subsubsection
Directory basierte Architektur
\end_layout

\begin_layout Standard
Bei der Directory basierten Architektur können die Netzwerkteilnehmer drei
 verschiedene Rollen übernehmen.
 Ein Netzwerkknoten kann dabei als Server seine Dienste anderen anbieten
 (SA = Service Agent), er kann als Client die Dienste von anderen Knoten
 nutzen (UA = User Agent) und er kann Service Directory die Services von
 anderen Verwalten und diese an die Clients vermitteln (DA = Directory Agent).
 Da MANET ein dynamisches Netzwerk ist, kann hier nicht vorausgesetzt werden,
 dass ein DA immer erreichbar ist, somit können auch mehrere DAs im Netzwerk
 vorhanden sein.
 Bei dieser Architektur spielt der Directory Agent eine zentralle Rolle
 und ist für das Netzwerk 
\begin_inset Quotes eld
\end_inset

Lebenswichtig
\begin_inset Quotes erd
\end_inset

.
 Die Idee bei dieser Architektur ist, dass die Endgeräte, die ihre Dienste
 anbieten möchte, die Informationen (z.B.
 Name, Server-IP, Dienstbeschreibung, etc.) über diese an die Directory Agents
 weiterleiten.
 Sobald ein Client bzw.
 UA einen Dienst nutzen möchte, fragt er bei einem DA nach einem bestimmten
 Dienst an, oder lässt sich die ganze Liste mit den verfügbaren Diensten
 ausgeben.
 Sobald der User Agent die Information über den gewünschten Service erhalten
 kann, verbindet er sich mit Hilfer dieser zum Server.
 Durch diese Architektur wird die Gesamtlast der Kommunikationen reduziert
 und entlastet die einzelnen Endgeräte, die nun nicht mehr durch Multicastsanfra
gen ihre Rechenzeit und somit auch ihre Akkulaufzeit strapazieren.
 Jedoch ist der Vorteil dieser Architektur auch gleichzeitig ihr größtes
 Nachteil, denn durch die Zentralisierung kann das Netzwerk leichter gestört
 werden.
 Wenn ein DA das Netzwerk verlassen hat, sind die Server, die dieser DA
 verwaltet hat, eventuell längere Zeit nicht mehr erreichbar und im schlimmsten
 fall können diese aus dem Netzwerk ausgeschlossen werden, falls kein neuer
 DA gefunden wird.
 Dazu gibt es ebenfalls verschiedene Ansätze, die solche Extremfälle verhindern
 sollen.
 Diese sind jedoch nicht Teil dieser Ausarbeitung und werden daher nicht
 weiter vertieft behandelt.
 
\end_layout

\begin_layout Subsubsection
Directory-less Architektur
\end_layout

\begin_layout Standard
Die Directory-less Architectur ist das Gegenteil zu der Directory basierten
 Architektur.
 Hier können die einzelnen Netzwekknoten nur zwei verschiedene Aufgaben
 übernehmen.
 Die Netzwerkknoten können ihre Dienste als SAs anbieten oder Dienste von
 anderen Knoten als UAs nutzen.
 Da diese Architektur keine Directory Agents vorsieht, müssen die angebotenen
 Dienste auf eine andere Weise gefunden werden.
 Auch hier gibt es verschiedene Ansätze.
 Die Server Agents können ihre Dienste in bestimmten Zeitintervallen an
 die anderen Knoten Multicasten und warten bis ein User Agent, der den Service
 nutzen möchte antwortet.
 Oder die User Agents können durch Suchanfragen selber nach gewünschten
 Diensten suchen.
 Dazu könnten sie ihre Dienstanfrage in bestimmten Zeitintervallen an die
 anderen Knoten Multicasten und warten bis ein Server antwortet oder sie
 können ihre Anfrage an die am nächstliegenden Knoten senden.
 Fall ein Knoten den gesuchten Dienst anbietet, wird die Kommunikation aufgebaut
, andernfalls Leitet der Knoten die Anfrage einfach an seine nächstgelegenden
 Knoten weiter.
 Diese Architektur benötigt gar keine zentralle Stelle und ist somit robuster
 gegen Netzwerkausfälle.
 Allerdings werden durch die vielen Multicasts die einzelnen Geräte mehr
 belastet und die Suche nach dem gewünschten Dienst kann sehr viel Zeit
 in Anspruch nehmen vergliechen mit der Directory basierten Architektur.
 
\end_layout

\begin_layout Subsubsection
Hybride Architektur
\end_layout

\begin_layout Standard
Bei der Hybriden Architektur handelt es sich um eine Mischung aus der Directory
 bassierten und der Directory freien Architektur.
 Die Hybride Architektur versucht die Vorteile von beiden Architekturen
 zu vereinen.
 Somit können bei dieser Architektur die Einzelnen Netzwerkknoten bis zu
 drei verschiedene Aufgaben übernehmen (SA, UA und DA).
 Die Server Agents suchen zuerst nach Directory Agents in ihrer Umgebung.
 Fall ein Directory Agent gefunden wurde, werden wie bei der Directory basierten
 Architektur die angebotenen Dienste an den DA weitergeleitet und der DA
 vermittel dann die Clients zun den Servern.
 Falls jedoch kein DA gefunden wurde, werden die angebotenen Dienste einfach
 per Broadcast im Netzwerk verteilt.
 Diese Architektur nimmt die Vorteile von der Directory basierten Architektur
 um Dienste effezienter zu verteilen und das Netzwerk durch die Broadcast-
 und Multicastanfragen zu entlasten und sorgt gleichzeitig zur besseren
 Ausfallsicherheit, durch die Möglichkeit Dienste weiterhin zu verbreiten
 auch wenn kein Directory Agent zur verfügung steht.
\end_layout

\end_body
\end_document
